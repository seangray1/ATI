import { LightningElement, api, track } from 'lwc';
import GetJobAccountRoles from '@salesforce/apex/NewJobController.GetJobAccountRoles';

const columns = [
    { label: 'Label', fieldName: 'name' },
    { label: 'Multiple_Roles__c', fieldName: 'multiple_roles__c', type: 'picklist' },
    
];

export default class AccountRolesEditLWC extends LightningElement 
{
@api recordId;
@track MarketsDisabled = false;
  PersonAccount = false;
  jobLoading = false;
  ARContacts;
  ContactAccountRole;
  Customers;
  CustomerValue;
  CustomerPicked = false;
  CustomerId;
  CustomerSelectedField;
  ContactAccounts;
  ContactAccountValue;
  ContactAccountPicked = false;
  ContactAccountSelected = false;
  ContactAccountId;
  ContactAccountName;
  searchKey;
  JobRealName;
  NewCaller = false;
  NewAccount = false;
  AccountRolesSelected = false;
  AccountRolesRecieved = "";
  inputDisabled = true;
  bShowModal = false;
  ContactId;
  ContactType;
  FirstName;
  LastName;
  MailingStreet;
  MailingCity;
  MailingState;
  MailingCounty;
  AccountId = "";
  MailingPostalCode;
  Phone;
  Email;
  PersonEmail;
  PhoneExt;
  AccountName;
  BillingStreet;
  BillingCity;
  BillingState;
  BillingPostalCode;
  Policy;
  AlternateName;
  Type;
  BillingCountry;
  AccountPhone;
  AccountPhoneExt;
  City;
  Country;
  State;
  AddressLine1;
  Zip;
  EstimateType;
  AccountRoleLineItems = [{}];
  loading = false;
  data;
  ContactSelected = false;
  AccountRole;
  ContactRole;
  CustomerAccountId;
  CustomerAccountName;
  AccountRolePicklistValuesContainer = [{}];
  DivisionPicklistValues = [{}];
  JobClassPicklistValues = [{}];
  EsJobTypePicklistValues = [{}];
  LeadSourcePicklistValues = [{}];
  MultipleDivisionPicklistValues = [{}];
  PropertyTypeValuesContainer = [{}];
  ARReady = false;
  AccountRoles = [{}];
  CreateContact = false;
  AccountEmpty = true;
  CreateNewContact = false;
  PersonAccountModal = false;
  AccountQuestion = false;
  AccountLastName;
  AccountFirstName;
  newAccountRoles = false;
  loadingContact = false;
  loadingPersonAccount = false;
  MultipleRoles;
  MultRoleInd;
  CompanyAccountRoles = "";
  PersonAccountRoles = "";
  TypeOfInsert = "";
  JobName;
  NotNewProperty = true;
  AutoComplete = false;
  ProjectDirectorValue = "";
  ProjectDirectors;
  ProjectDirectorId;
  TakenByUsers;
  TakenByValue;
  TakenById;
  billToCount = 0;
  AddressLine2;
  projectSiteContactCount = 0;
  ProjectDirectorSelected = false;
  DateOfLoss;
  ClientJob;
  YearBuilt;
  PolicyDisabled = false;
  ARRoleBlank = false;
  ClientJobDisabled = false;
  ClaimDisabled = false;
  LeadSourceDisabled = false;
  DateOfLossDisabled = false;
  DescriptionDisabled = false;
  OfficeDisabled = false;
  NewAccountCreated = false;
  callerCount = 0;
  caller = false;
  newDescription = false;
  fireLoss = false;
  waterLoss = false;
  bioLoss = false;
  //@track MarketClassValues =[{}]; @track MarketSegmentValues = [{}]; @track MarketSegmentSubClassValues = [{}];
  UserId = StrUserId;
  name;
  TypeOfLoss = "";
  CauseOfLoss = "";
  CustomerType = "";
  PropertyDescription = "";
  AreasAffected = "";
  DamagedMaterials = "";
  FlooringType = "";
  PowerShutOff = "";
  GateCode = "";
  StandingWater = "";
  CleanWater = "";
  Plumber = "";
  WaterShutOff = "";
  LeakFixed = "";
  FireDamage = "";
  EmergencyResponders = "";
  Clearance = "";
  BloodOrFluids = "";
  Body = "";
  Odor = "";
  Belongings = "";
  @track ExistingMasterJob = false;
  @api jobrecordId;
  @api TypeOfJobEntry;
  @track PropertyIsNotSelected = true;	
  @track PropertyPrompt = false;	
  @track PropertyTempId;	
  @track JobTemp;
  @track Policy;
  @track MarketSegmentOptions;
  @track MarketClassValues;
  @track MarketClass;
  @track MarketSegment;
  @track MarketSegmentValues;
  @track MarketSegmentSubClass;
  @track MarketSegmentSubClassValues;
  @track MarketSegmentSubClassOptions;
  @track NonResidential = false;
  @track AccountRoles = [{}];
  @track MajorEvents;
  @track MajorEventValue;
  @track MajorEventId;
  @track MajorEventSelected = false;
  @track Coronavirus = "";
  @track SameDayDispatch = "";

async connectedCallback()
    {
        console.log('Record Id is ' + this.recordId);
        GetJobAccountRoles({recordId:this.recordId}).then(result =>
            {
                console.log('result is ' + result);
                // this.data = result;
                // console.log('Data ' + this.data);
            })
    }
}